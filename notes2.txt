>>> help(video_transcoding.tasks)
Help on module video_transcoding.tasks in video_transcoding:

NAME
    video_transcoding.tasks

CLASSES
    celery.app.task.Task(builtins.object)
        TranscodeVideo(video_transcoding.utils.LoggerMixin, celery.app.task.Task)
    video_transcoding.utils.LoggerMixin(builtins.object)
        TranscodeVideo(video_transcoding.utils.LoggerMixin, celery.app.task.Task)

    class TranscodeVideo(video_transcoding.utils.LoggerMixin, celery.app.task.Task)
     |  TranscodeVideo(*args: Any, **kwargs: Any) -> None
     |
     |  Video processing task.
     |
     |  Method resolution order:
     |      TranscodeVideo
     |      video_transcoding.utils.LoggerMixin
     |      celery.app.task.Task
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  download(self, source: str, destination: str) -> None
     |      Downloads source to temporary directory
     |      :param source: source file link
     |      :param destination: path to downloaded file
     |
     |  lock_video(self, video_id: int) -> video_transcoding.models.Video
     |      Gets video in QUEUED status from DB and changes status to PROCESS.
     |
     |      :param video_id: Video primary key
     |      :returns: Video object
     |      :raises Retry: in case of unexpected video status or task_id
     |
     |  process_video(self, video: video_transcoding.models.Video, basename: str, download: bool = False) -> None
     |      Video processing workflow.
     |
     |      1. Create temporary directory
     |      2. Transcode source file
     |      3. Upload resulting file to origins
     |      4. Cleanup temporary directory
     |
     |      :param video: Video object
     |      :param basename: video files common base name
     |      :param download: download source to temp dir
     |
     |  run(self, video_id: int, download: bool = False) -> Optional[str]
     |      Process video.
     |
     |      1. Locks video changing status from QUEUED to PROCESS
     |      2. Transcodes video and stores result to origins
     |      3. Changes video status to DONE, stores result basename
     |      4. On errors changes video status ERROR, stores error message
     |
     |      :param video_id: Video id.
     |      :param download: Download source file to tmp dir before processing.
     |
     |  select_for_update(self, video_id: int, status: int) -> video_transcoding.models.Video
     |      Lock video in DB for current task.
     |
     |      :param video_id: Video primary key
     |      :param status: expected video status
     |      :returns: Video object from db
     |
     |      :raises models.Video.DoesNotExist: in case of missing or locked
     |          Video for primary key
     |      :raises ValueError: in case of unexpected Video status or task_id
     |
     |  store(self, destination: str) -> None
     |      Stores transcoded video to origin list
     |
     |      :param destination: transcoded video path.
     |
     |  transcode(self, source: str, destination: str) -> None
     |      Starts video transcoding
     |
     |      :param source: source file link (http/ftp or file path)
     |      :param destination: result temporary file path.
     |
     |  unlock_video(self, video_id: int, status: int, error: Optional[str], basename: Optional[str]) -> None
     |      Marks video with final status.
     |
     |      :param video_id: Video primary key
     |      :param status: final video status (Video.DONE, Video.ERROR)
     |      :param error: error message
     |      :param basename: UUID-like result file identifier
     |      :raises RuntimeError: in case of unexpected video status or task id
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  __bound__ = True
     |
     |  acks_late = True
     |
     |  acks_on_failure_or_timeout = True
     |
     |  ignore_result = False
     |
     |  name = 'video.transcode'
     |
     |  priority = None
     |
     |  rate_limit = None
     |
     |  reject_on_worker_lost = True
     |
     |  request_stack = <celery.utils.threads._LocalStack object>
     |
     |  routing_key = 'video_transcoding'
     |
     |  serializer = 'json'
     |
     |  store_eager_result = False
     |
     |  store_errors_even_if_ignored = False
     |
     |  track_started = False
     |
     |  typing = True
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from video_transcoding.utils.LoggerMixin:
     |
     |  __init__(self, *args: Any, **kwargs: Any) -> None
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from video_transcoding.utils.LoggerMixin:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from celery.app.task.Task:
     |
     |  AsyncResult(self, task_id, **kwargs)
     |      Get AsyncResult instance for the specified task.
     |
     |      Arguments:
     |          task_id (str): Task id to get result for.
     |
     |  __call__(self, *args, **kwargs)
     |      Call self as a function.
     |
     |  __reduce__(self)
     |      Helper for pickle.
     |
     |  __repr__(self)
     |      ``repr(task)``.
     |
     |  add_to_chord(self, sig, lazy=False)
     |      Add signature to the chord the current task is a member of.
     |
     |      .. versionadded:: 4.0
     |
     |      Currently only supported by the Redis result backend.
     |
     |      Arguments:
     |          sig (Signature): Signature to extend chord with.
     |          lazy (bool): If enabled the new task won't actually be called,
     |              and ``sig.delay()`` must be called manually.
     |
     |  add_trail(self, result)
     |
     |  after_return(self, status, retval, task_id, args, kwargs, einfo)
     |      Handler called after the task returns.
     |
     |      Arguments:
     |          status (str): Current task state.
     |          retval (Any): Task return value/exception.
     |          task_id (str): Unique id of the task.
     |          args (Tuple): Original arguments for the task.
     |          kwargs (Dict): Original keyword arguments for the task.
     |          einfo (~billiard.einfo.ExceptionInfo): Exception information.
     |
     |      Returns:
     |          None: The return value of this handler is ignored.
     |
     |  apply(self, args=None, kwargs=None, link=None, link_error=None, task_id=None, retries=None, throw=None, logfile=None, loglevel=None, headers=None, **options)
     |      Execute this task locally, by blocking until the task returns.
     |
     |      Arguments:
     |          args (Tuple): positional arguments passed on to the task.
     |          kwargs (Dict): keyword arguments passed on to the task.
     |          throw (bool): Re-raise task exceptions.
     |              Defaults to the :setting:`task_eager_propagates` setting.
     |
     |      Returns:
     |          celery.result.EagerResult: pre-evaluated result.
     |
     |  apply_async(self, args=None, kwargs=None, task_id=None, producer=None, link=None, link_error=None, shadow=None, **options)
     |      Apply tasks asynchronously by sending a message.
     |
     |      Arguments:
     |          args (Tuple): The positional arguments to pass on to the task.
     |
     |          kwargs (Dict): The keyword arguments to pass on to the task.
     |
     |          countdown (float): Number of seconds into the future that the
     |              task should execute.  Defaults to immediate execution.
     |
     |          eta (~datetime.datetime): Absolute time and date of when the task
     |              should be executed.  May not be specified if `countdown`
     |              is also supplied.
     |
     |          expires (float, ~datetime.datetime): Datetime or
     |              seconds in the future for the task should expire.
     |              The task won't be executed after the expiration time.
     |
     |          shadow (str): Override task name used in logs/monitoring.
     |              Default is retrieved from :meth:`shadow_name`.
     |
     |          connection (kombu.Connection): Re-use existing broker connection
     |              instead of acquiring one from the connection pool.
     |
     |          retry (bool): If enabled sending of the task message will be
     |              retried in the event of connection loss or failure.
     |              Default is taken from the :setting:`task_publish_retry`
     |              setting.  Note that you need to handle the
     |              producer/connection manually for this to work.
     |
     |          retry_policy (Mapping): Override the retry policy used.
     |              See the :setting:`task_publish_retry_policy` setting.
     |
     |          time_limit (int): If set, overrides the default time limit.
     |
     |          soft_time_limit (int): If set, overrides the default soft
     |              time limit.
     |
     |          queue (str, kombu.Queue): The queue to route the task to.
     |              This must be a key present in :setting:`task_queues`, or
     |              :setting:`task_create_missing_queues` must be
     |              enabled.  See :ref:`guide-routing` for more
     |              information.
     |
     |          exchange (str, kombu.Exchange): Named custom exchange to send the
     |              task to.  Usually not used in combination with the ``queue``
     |              argument.
     |
     |          routing_key (str): Custom routing key used to route the task to a
     |              worker server.  If in combination with a ``queue`` argument
     |              only used to specify custom routing keys to topic exchanges.
     |
     |          priority (int): The task priority, a number between 0 and 9.
     |              Defaults to the :attr:`priority` attribute.
     |
     |          serializer (str): Serialization method to use.
     |              Can be `pickle`, `json`, `yaml`, `msgpack` or any custom
     |              serialization method that's been registered
     |              with :mod:`kombu.serialization.registry`.
     |              Defaults to the :attr:`serializer` attribute.
     |
     |          compression (str): Optional compression method
     |              to use.  Can be one of ``zlib``, ``bzip2``,
     |              or any custom compression methods registered with
     |              :func:`kombu.compression.register`.
     |              Defaults to the :setting:`task_compression` setting.
     |
     |          link (Signature): A single, or a list of tasks signatures
     |              to apply if the task returns successfully.
     |
     |          link_error (Signature): A single, or a list of task signatures
     |              to apply if an error occurs while executing the task.
     |
     |          producer (kombu.Producer): custom producer to use when publishing
     |              the task.
     |
     |          add_to_parent (bool): If set to True (default) and the task
     |              is applied while executing another task, then the result
     |              will be appended to the parent tasks ``request.children``
     |              attribute.  Trailing can also be disabled by default using the
     |              :attr:`trail` attribute
     |
     |          ignore_result (bool): If set to `False` (default) the result
     |              of a task will be stored in the backend. If set to `True`
     |              the result will not be stored. This can also be set
     |              using the :attr:`ignore_result` in the `app.task` decorator.
     |
     |          publisher (kombu.Producer): Deprecated alias to ``producer``.
     |
     |          headers (Dict): Message headers to be included in the message.
     |
     |      Returns:
     |          celery.result.AsyncResult: Promise of future evaluation.
     |
     |      Raises:
     |          TypeError: If not enough arguments are passed, or too many
     |              arguments are passed.  Note that signature checks may
     |              be disabled by specifying ``@task(typing=False)``.
     |          kombu.exceptions.OperationalError: If a connection to the
     |             transport cannot be made, or if the connection is lost.
     |
     |      Note:
     |          Also supports all keyword arguments supported by
     |          :meth:`kombu.Producer.publish`.
     |
     |  before_start(self, task_id, args, kwargs)
     |      Handler called before the task starts.
     |
     |      .. versionadded:: 5.2
     |
     |      Arguments:
     |          task_id (str): Unique id of the task to execute.
     |          args (Tuple): Original arguments for the task to execute.
     |          kwargs (Dict): Original keyword arguments for the task to execute.
     |
     |      Returns:
     |          None: The return value of this handler is ignored.
     |
     |  chunks(self, it, n)
     |      Create a :class:`~celery.canvas.chunks` task for this task.
     |
     |  delay(self, *args, **kwargs)
     |      Star argument version of :meth:`apply_async`.
     |
     |      Does not support the extra options enabled by :meth:`apply_async`.
     |
     |      Arguments:
     |          *args (Any): Positional arguments passed on to the task.
     |          **kwargs (Any): Keyword arguments passed on to the task.
     |      Returns:
     |          celery.result.AsyncResult: Future promise.
     |
     |  map(self, it)
     |      Create a :class:`~celery.canvas.xmap` task from ``it``.
     |
     |  on_failure(self, exc, task_id, args, kwargs, einfo)
     |      Error handler.
     |
     |      This is run by the worker when the task fails.
     |
     |      Arguments:
     |          exc (Exception): The exception raised by the task.
     |          task_id (str): Unique id of the failed task.
     |          args (Tuple): Original arguments for the task that failed.
     |          kwargs (Dict): Original keyword arguments for the task that failed.
     |          einfo (~billiard.einfo.ExceptionInfo): Exception information.
     |
     |      Returns:
     |          None: The return value of this handler is ignored.
     |
     |  on_retry(self, exc, task_id, args, kwargs, einfo)
     |      Retry handler.
     |
     |      This is run by the worker when the task is to be retried.
     |
     |      Arguments:
     |          exc (Exception): The exception sent to :meth:`retry`.
     |          task_id (str): Unique id of the retried task.
     |          args (Tuple): Original arguments for the retried task.
     |          kwargs (Dict): Original keyword arguments for the retried task.
     |          einfo (~billiard.einfo.ExceptionInfo): Exception information.
     |
     |      Returns:
     |          None: The return value of this handler is ignored.
     |
     |  on_success(self, retval, task_id, args, kwargs)
     |      Success handler.
     |
     |      Run by the worker if the task executes successfully.
     |
     |      Arguments:
     |          retval (Any): The return value of the task.
     |          task_id (str): Unique id of the executed task.
     |          args (Tuple): Original arguments for the executed task.
     |          kwargs (Dict): Original keyword arguments for the executed task.
     |
     |      Returns:
     |          None: The return value of this handler is ignored.
     |
     |  pop_request(self)
     |
     |  push_request(self, *args, **kwargs)
     |
     |  replace(self, sig)
     |      Replace this task, with a new task inheriting the task id.
     |
     |      Execution of the host task ends immediately and no subsequent statements
     |      will be run.
     |
     |      .. versionadded:: 4.0
     |
     |      Arguments:
     |          sig (Signature): signature to replace with.
     |
     |      Raises:
     |          ~@Ignore: This is always raised when called in asynchronous context.
     |          It is best to always use ``return self.replace(...)`` to convey
     |          to the reader that the task won't continue after being replaced.
     |
     |  retry(self, args=None, kwargs=None, exc=None, throw=True, eta=None, countdown=None, max_retries=None, **options)
     |      Retry the task, adding it to the back of the queue.
     |
     |      Example:
     |          >>> from imaginary_twitter_lib import Twitter
     |          >>> from proj.celery import app
     |
     |          >>> @app.task(bind=True)
     |          ... def tweet(self, auth, message):
     |          ...     twitter = Twitter(oauth=auth)
     |          ...     try:
     |          ...         twitter.post_status_update(message)
     |          ...     except twitter.FailWhale as exc:
     |          ...         # Retry in 5 minutes.
     |          ...         self.retry(countdown=60 * 5, exc=exc)
     |
     |      Note:
     |          Although the task will never return above as `retry` raises an
     |          exception to notify the worker, we use `raise` in front of the
     |          retry to convey that the rest of the block won't be executed.
     |
     |      Arguments:
     |          args (Tuple): Positional arguments to retry with.
     |          kwargs (Dict): Keyword arguments to retry with.
     |          exc (Exception): Custom exception to report when the max retry
     |              limit has been exceeded (default:
     |              :exc:`~@MaxRetriesExceededError`).
     |
     |              If this argument is set and retry is called while
     |              an exception was raised (``sys.exc_info()`` is set)
     |              it will attempt to re-raise the current exception.
     |
     |              If no exception was raised it will raise the ``exc``
     |              argument provided.
     |          countdown (float): Time in seconds to delay the retry for.
     |          eta (~datetime.datetime): Explicit time and date to run the
     |              retry at.
     |          max_retries (int): If set, overrides the default retry limit for
     |              this execution.  Changes to this parameter don't propagate to
     |              subsequent task retry attempts.  A value of :const:`None`,
     |              means "use the default", so if you want infinite retries you'd
     |              have to set the :attr:`max_retries` attribute of the task to
     |              :const:`None` first.
     |          time_limit (int): If set, overrides the default time limit.
     |          soft_time_limit (int): If set, overrides the default soft
     |              time limit.
     |          throw (bool): If this is :const:`False`, don't raise the
     |              :exc:`~@Retry` exception, that tells the worker to mark
     |              the task as being retried.  Note that this means the task
     |              will be marked as failed if the task raises an exception,
     |              or successful if it returns after the retry call.
     |          **options (Any): Extra options to pass on to :meth:`apply_async`.
     |
     |      Raises:
     |
     |          celery.exceptions.Retry:
     |              To tell the worker that the task has been re-sent for retry.
     |              This always happens, unless the `throw` keyword argument
     |              has been explicitly set to :const:`False`, and is considered
     |              normal operation.
     |
     |  s(self, *args, **kwargs)
     |      Create signature.
     |
     |      Shortcut for ``.s(*a, **k) -> .signature(a, k)``.
     |
     |  send_event(self, type_, retry=True, retry_policy=None, **fields)
     |      Send monitoring event message.
     |
     |      This can be used to add custom event types in :pypi:`Flower`
     |      and other monitors.
     |
     |      Arguments:
     |          type_ (str):  Type of event, e.g. ``"task-failed"``.
     |
     |      Keyword Arguments:
     |          retry (bool):  Retry sending the message
     |              if the connection is lost.  Default is taken from the
     |              :setting:`task_publish_retry` setting.
     |          retry_policy (Mapping): Retry settings.  Default is taken
     |              from the :setting:`task_publish_retry_policy` setting.
     |          **fields (Any): Map containing information about the event.
     |              Must be JSON serializable.
     |
     |  shadow_name(self, args, kwargs, options)
     |      Override for custom task name in worker logs/monitoring.
     |
     |      Example:
     |          .. code-block:: python
     |
     |              from celery.utils.imports import qualname
     |
     |              def shadow_name(task, args, kwargs, options):
     |                  return qualname(args[0])
     |
     |              @app.task(shadow_name=shadow_name, serializer='pickle')
     |              def apply_function_async(fun, *args, **kwargs):
     |                  return fun(*args, **kwargs)
     |
     |      Arguments:
     |          args (Tuple): Task positional arguments.
     |          kwargs (Dict): Task keyword arguments.
     |          options (Dict): Task execution options.
     |
     |  si(self, *args, **kwargs)
     |      Create immutable signature.
     |
     |      Shortcut for ``.si(*a, **k) -> .signature(a, k, immutable=True)``.
     |
     |  signature(self, args=None, *starargs, **starkwargs)
     |      Create signature.
     |
     |      Returns:
     |          :class:`~celery.signature`:  object for
     |              this task, wrapping arguments and execution options
     |              for a single task invocation.
     |
     |  signature_from_request(self, request=None, args=None, kwargs=None, queue=None, **extra_options)
     |
     |  starmap(self, it)
     |      Create a :class:`~celery.canvas.xstarmap` task from ``it``.
     |
     |  start_strategy(self, app, consumer, **kwargs)
     |
     |  subtask = signature(self, args=None, *starargs, **starkwargs)
     |
     |  subtask_from_request = signature_from_request(self, request=None, args=None, kwargs=None, queue=None, **extra_options)
     |
     |  update_state(self, task_id=None, state=None, meta=None, **kwargs)
     |      Update task state.
     |
     |      Arguments:
     |          task_id (str): Id of the task to update.
     |              Defaults to the id of the current task.
     |          state (str): New state.
     |          meta (Dict): State meta-data.
     |
     |  ----------------------------------------------------------------------
     |  Class methods inherited from celery.app.task.Task:
     |
     |  add_around(attr, around) from builtins.type
     |
     |  annotate() from builtins.type
     |
     |  bind(app) from builtins.type
     |
     |  on_bound(app) from builtins.type
     |      Called when the task is bound to an app.
     |
     |      Note:
     |          This class method can be defined to do additional actions when
     |          the task class is bound to an app.
     |
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from celery.app.task.Task:
     |
     |  request
     |      Get current request object.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from celery.app.task.Task:
     |
     |  backend
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from celery.app.task.Task:
     |
     |  MaxRetriesExceededError = <class 'celery.exceptions.MaxRetriesExceeded...
     |      The tasks max restart limit has been exceeded.
     |
     |
     |  OperationalError = <class 'kombu.exceptions.OperationalError'>
     |      Recoverable message transport connection error.
     |
     |
     |  Request = 'celery.worker.request:Request'
     |
     |  Strategy = 'celery.worker.strategy:default'
     |
     |  __trace__ = None
     |
     |  __v2_compat__ = False
     |
     |  abstract = True
     |
     |  app = <Celery video_transcoding>
     |
     |  default_retry_delay = 180
     |
     |  expires = None
     |
     |  from_config = (('serializer', 'task_serializer'), ('rate_limit', 'task...
     |
     |  max_retries = 3
     |
     |  resultrepr_maxsize = 1024
     |
     |  send_events = True
     |
     |  soft_time_limit = None
     |
     |  throws = ()
     |
     |  time_limit = None
     |
     |  trail = True

DATA
    CONNECT_TIMEOUT = 1
    DESTINATION_FILENAME = '{basename}1080p.mp4'
    DOWNLOAD_TIMEOUT = 3600
    Optional = typing.Optional
        Optional type.

        Optional[X] is equivalent to Union[X, None].

    UPLOAD_TIMEOUT = 3600
    __annotations__ = {'transcode_video': <class 'video_transcoding.tasks....
    app = <Celery video_transcoding>
    transcode_video = <@task: video.transcode of video_transcoding>

FILE
    c:\users\leo nine\documents\bubezi\code\ktube\ktube\env1\lib\site-packages\video_transcoding\tasks.py
