# KEY
    [] To do
    [] Done
    [*] Will not do, for now


######
# NOTES

#
Disable whitenoise and ALL related settings before collectstatic command

#
Video-on-demand
Pay-per-view

#
Kenya web experts

######

# GOOGLE AND Research

[] Fieldset

[] google HUMANIze Tags
[] Add page Loader
[] *return to last video time after sub from video redirect
[] Drag and drop functionality
[] Django video View count
[] Does Django use websockets
[] UPDATE Like and Dislike buttons / svg
[] How to serve videos better django
[] Better alternative for paginator (For comments and Comment replies)
[] Dynamic login redirect
[] Optional url additions /url/<str:pk>
[] Video.Js

######

# React 

[] Watchpage
    [x] Delete Comment
    [] Subscribe
    [] Like
    [] Dislike
    [] Comment
        [] Single Channel
        [] Many Channels

######

# PHASE ! - Initialise
[] Utilize the {% empty %} tag in for loop TAGS
[] Add DP
[] Profile Page
[] fix Change Channel details form
[] Sub
[] Organise Templates and views
    [] Script and css declarations
    [] include and tags
[] Like
[] add upload pages
    [] Video Upload
    [] add signup page
    [] Create playlist page
[] Fix Navbar
[] Privacy
    [] USER should Not be able to change other USER's details outside admin panel
    [] USER should Not be able to create other USER'S channel
    [] Private & Unlisted Videos
    [] Public playlists
[] History
[] Liked Videos 
[] Fix Correct box element places
[] Fix Channel page with multiple playlists
[] video views and view-count update
[] Add playlist(s) page
    [] Watch Later ** Possibly Created after Viewer is created
    [] Libary 
        [] Watch Later
        [] Saved Playlists
        [] Liked Videos
        [] History
    [] Subscriptions
[] playlist functionality
    [] Add video to Watchlater functionality
    [] Add video to playlist functionality
    [] Remove video from playlist functionality
    [] Remove video from Watchlater functionality
    [] Add add and/or remove to
        [] Playlist page (More of remove)
        [] Channel page
        [] Liked videos page and on library page
        [] Watch page
        [] Subscriptions page
        [] Watchlater page and on library page
        [] History page and on library page
        [] Library page (More of remove)
    [] ABILITY for USERS to delete playlists
    [] Save and Delete playlist functionality
        [] Playlist page
        [] Channel page
        [] Saved Playlists page (remove)
        [] Library page
[] Ability to Comment
[] Ability to reply to Comments
[] PLaylist in Watch Page init
[] PLaylist in Watch Page
    [] PLAY ALL BUTTON FOR Playlists
    [] Playlist views update
[] ABILITY for USERS to delete models
    [] Playlist
    [] Video
    [] Channel
    [] Comment
    [] Comment Reply
    [] Viewer (USER - unmark active status)
    [] Password before delete functionality
        [] Channel
        [] Viewer (USER - unmark active status)
        [*] Video
            [*] Prompt in browser for input JavaScript
[] ABILITY for USERS to edit models
    [] Channel
    [] Playlist
        [] Change name
        [] Change Public status
        [] Change Videos
        [] Drag to rearange ****************************************************
    [] Video
        [] Change Title
        [*] Change Video
        [] Change Thumbnail
        [] Change Description
        [] Change private
        [] Change unlisted
    [*] Viewer
    [*] Comment
    [*] Comment Reply
[*] Like and Dislike Comments
[] PREVENT USER ABILITY TO WATCH VIDEO MULTILPLE TIMES TO INCREASE VIEW COUNT *************
    [] Currently 5 minutes
[] Search functionality
[] Create my Channels page

[] UPDATE Favivons

######

# PHASE 2 - Perfect
[] Video slug - From link using video id to slug
[] Video costs something
[] Fix revenue percentage error
[] History compile similar adjacent videos
[] WARNING:waitress.queue:Task queue depth is 94
[] WARNING:waitress:total open connections reached the connection limit, no longer accepting new connections
[] robots.txt => https://ordinarycoders.com/blog/article/robots-text-file-django
[] Change like and dislike buttons
[] File too large test
[] Search
    [] history
    [] algorithm
[] Create logic
    [] Channel
    [] comments
    [] likes and dislikes
    [] Subscriptions and Playlists
    [] ACC SHOUD ONLY LIKE, dislike & SUB ONCE
    [] Streaming
        [] Opencv (and/or) [] NodeJs 
    [] Get metadata from video 
    [] Seaking
    [] Resume capability
    [] Auto skip (Play next)
    [*] Pictures (For events and shit)
[] Get IP address of the view for (esp) logged out viewers
    [] Viewing algorithm limit
[] Install rtmps in local nginx
    [] Dockerised rtmps server
[] Dockerise django
[] Install and implement postgresql
[] Use React-specific libraries like React-Bootstrap or Reactstrap
[] Lighthouse 100% mobile
    [] PWA
        [] Installable
        [] Web app and manifest
        [] register a service worker that controls page and start_url
        [] Maskable Icon
    [] Performance
    [] Accessibility
    [] Best Practises
    [] SEO
[] Learn React
[] Fix login error feedback
[] Use Docker
    [] Use RTMPs in docker
[] Learn and Use Kubernetes
[] Update types where possible
[] Seperate logic into django apps
[] Copyright DETECTION AND REGISTERING FUNCTIONALITY
[] Recommend FUNCTIONALITY
[] Analytics
    [] Paid viewers
    [] Views
    [] Likes and Dislikes
    [] Subscribers
[] Limit Video Quality 720p
[] Tutorials
[] Background play 
    [] Premium Videos ()
[] Ads
[] Hover to play
[] Local downloads (Save for offline)
[] Pop out, confirm transaction
[] Trailer, mid video transaction
[] Better profile image Placeholder
[] Categories
[] Video short
[] Shorts ****************************************************************
[] Comment with Emoji ****************************************************************
[] Filter Comment ****************************************************************
[] Optional Disable comments ****************************************************************
[] Respective Currencies in Quotations
[] Report and feedback
[] Internal copyright detection (Sites own videos)
[] Autogenerate thumbnail from video
[] Autoplay
[] Fix forms
    [] Fix edit video form
    [] Fix upload video form. Esp Price
    [] Make form not loose data input after invalid form input During sign up (Or any other form)
    [] Ajax all forms *(or React version of it)
[] Change video thumbnail bug
[] Fix comments bug 
[] Fix Photofiles with Asian characters bug
[] Add Audio stream
[] Find optimum ratio for thumbanail
[] Check Lighthouse errors
[] Search filters
[] An uploading loader (Upoading, processing)
[] Auto Skip
[] Round off cash
[] Log video view count after a percentage of video length
[] Add bootstrap.bundle.js
[] Use tools like ngrok or configure SSL certificates for local testing
[] Check out NODE JS FOR LIVE STREAMING
[] Timezone management
[] Manage recurring Ajax get functions
[] Create dynamic sitemap => https://ordinarycoders.com/blog/article/django-sitemap
[] Decorate Python Code
[] You are signed in another tab, reload to update session ALERT
[] Internal Mini player functionality
[] Add to Que
[] Better alternative for paginator
[] Fix Profile on mobile
[] Drag and drop functionality
[] Blue link problem
[] Get video length
[] Return to specific page after subscribe login redirect
[] Personalise password_change_view.html and password_reset_view.html pages
[] video SHORTCUTS
[] COVER PHOTO FOR CHANNELS
[] Viewer Comment appear just after comment
[] Viewer Reply appear just after reply
[] Viewer Comment be on top of comments
[] Viewer Reply to Comment be on top of replies to comments
[] ABILITY TO tag individuals in comments
[] ABILITY TO transfer channel to another viewer
[] FIX comments
[] UI
    [] Make everything beautiful
        [] Themes
    [] responsiveness 
        [] Google Chrome Lighthouse (target 100%)
            [] How to convert images to WebP and AVIF from PNG or JPEG
            [] Types for video upload
        [] RWA
[] Migrate Js from HTML to JS files
    [] channel.html
    [] history.html
    [] library.html
    [] liked_videos.html
    [] playlist.html
    [] saved_playlists.html
    [] subscriptions.html
    [] videos.html
    [] watch.html
    [] watchlater.html
[] remove playlistId and other unused arguments from 
    [] handleRemoveFromWatchlater and 
    [] other Functions
        [] channel.html
        [] history.html
        [] library.html
        [] liked_videos.html
        [] playlist.html
        [] subscriptions.html
        [] videos.html
        [] watch.html
        [] watchlater.html
[] Custom JavaScript Features
    [] Alert
    [] Confirm
    [] FIND MORE
[] Edit Check Errors Function and make a loop function from a conditional one
[] Compress Js code and all code or some shit

[] Learn Squel and Bash


######

# Phase 3 - LiveStream

[] To enable video streaming in your Django site, you can follow these general steps:
    [] 1. Store the video files in a directory on your 
    server or in a cloud storage service like AWS S3 or 
    Google Cloud Storage.
    [] 2. Use a media server like Nginx, Apache or HLS to 
    serve the video files to clients. These media servers 
    can handle requests for video files and deliver them 
    to clients over HTTP.
    [] 3. In your Django views, you can generate URLs to 
    the video files based on their filename or ID in your 
    database.
    [] 4. Include a video player in your HTML templates to 
    play the videos. Popular options include Video.js, JW 
    Player, and Plyr.
    [] 5. For live video streaming, you will need to use a 
    streaming protocol like RTMP or HLS, and a media server 
    that supports live streaming.
[] Here are some additional tips and resources for implementing 
video streaming in Django:
    [] - Use a media server that is optimized for video streaming. 
    Nginx and Apache both have modules for serving video files over 
    HTTP, and HLS is a popular streaming protocol that can be used 
    with both servers.
    [] - Consider using a content delivery network (CDN) to distribute 
    your videos. A CDN can cache your video files at edge locations 
    around the world, reducing latency and improving playback performance 
    for viewers.
    [] - For live video streaming, consider using a service like AWS 
    Elemental MediaLive or Wowza Streaming Engine to handle the video 
    encoding and delivery.
    [] - Make sure to set the appropriate MIME type for video files in 
    your HTTP response headers. For example, for MP4 files, you should 
    set the MIME type to `video/mp4`.
    [] - Use video encoding settings that are optimized for web playback. 
    H.264 is a popular video codec for web video, and the MP4 container 
    format is widely supported by modern browsers.
    [] - Test your video streaming implementation thoroughly across different 
    browsers and devices to ensure smooth playback and optimal performance.
    [] - Here's a good tutorial that covers the basics of implementing video 
    streaming in Django using Nginx and Video.js: 
    https://simpleisbetterthancomplex.com/tutorial/2018/02/03/how-to-stream-video-on-demand-with-django.html


######

# Pre Hosting shit
[] Your browser does not support the video tag
[] python manage.py check ****
    [] python manage.py check --deploy
    [] ****
[] python manage.py collectstatic
[] email configuration
[] Authentication 
    [] Google (Firebase)
    [] Facebook
    [] Email

######

# [] PROBLEMS
[] / THE URL problem
[] GET data from video
