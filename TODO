GOOGLE AND TODO
[] google HUMANIze Tags
[] Learn React
[] UI
    [] Make everything beautiful
    [] responsiveness 
        [] Google Chrome Lighthouse (target 100%)
            [] How to convert images to WebP and AVIF from PNG or JPEG
            [] Types for video upload
        [] RWA
    [] Possibly with react
[] Google Authentication


##############################################################
[x] Add DP
[x] Profile Page
[x] fix Change Channel details form
[] Privacy
    [x] USER should Not be able to change other USER's details outside admin panel
    [x] USER should Not be able to create other USER'S channel
    [] Private & Unlisted Videos
    [] Public playlists

[] Add playlist(s) page
[] views update
[] add upload pages
    [] Video Upload
    [x] add signup page
    [] Create playlist
[] Like and Sub
[] Edit Check Errors Function and make a loop function from a conditional one
[] History
[] Liked Videos
[] Change like and dislike buttons
[] video SHORTCUTS
[] FIX comments
[] PLAY ALL BUTTON FOR Playlists
[] COVER PHOTO FOR CHANNELS
[] Utilize the {% empty %} tag in for loop TAGS
[] Personalise password_change_view.html and password_reset_view.html pages
[] ABILITY for USERS to delete models
[] ABILITY TO tag individuals in comments
[] ABILITY TO transfer channel to another viewer
[] Create logic
    [x] Channel
    [x] comments
    [x] likes and dislikes
    [x] Subscriptions and Playlists
    [] Streaming - Opencv
    [] ACC SHOUD ONLY LIKE, dislike & SUB ONCE
    [] Seaking
[] PROBLEMS
    [x] / THE URL problem
    [] GET data from video (USE )
[] To enable video streaming in your Django site, you can follow these general steps:
    [] 1. Store the video files in a directory on your server or in a cloud storage service like AWS S3 or Google Cloud Storage.
    [] 2. Use a media server like Nginx, Apache or HLS to serve the video files to clients. These media servers can handle requests for video files and deliver them to clients over HTTP.
    [] 3. In your Django views, you can generate URLs to the video files based on their filename or ID in your database.
    [] 4. Include a video player in your HTML templates to play the videos. Popular options include Video.js, JW Player, and Plyr.
    [] 5. For live video streaming, you will need to use a streaming protocol like RTMP or HLS, and a media server that supports live streaming.
[] Here are some additional tips and resources for implementing video streaming in Django:
    [] - Use a media server that is optimized for video streaming. Nginx and Apache both have modules for serving video files over HTTP, and HLS is a popular streaming protocol that can be used with both servers.
    [] - Consider using a content delivery network (CDN) to distribute your videos. A CDN can cache your video files at edge locations around the world, reducing latency and improving playback performance for viewers.
    [] - For live video streaming, consider using a service like AWS Elemental MediaLive or Wowza Streaming Engine to handle the video encoding and delivery.
    [] - Make sure to set the appropriate MIME type for video files in your HTTP response headers. For example, for MP4 files, you should set the MIME type to `video/mp4`.
    [] - Use video encoding settings that are optimized for web playback. H.264 is a popular video codec for web video, and the MP4 container format is widely supported by modern browsers.
    [] - Test your video streaming implementation thoroughly across different browsers and devices to ensure smooth playback and optimal performance.
    [] - Here's a good tutorial that covers the basics of implementing video streaming in Django using Nginx and Video.js: https://simpleisbetterthancomplex.com/tutorial/2018/02/03/how-to-stream-video-on-demand-with-django.html



############################################################
Username:allowme
Password:1q2w3enininiw




Sure, here is a complete list of all the tags and filters provided by the "humanize" app in Django:

**Filters:**

1. `apnumber`: Converts a number to its corresponding English ordinal word, such as "1st", "2nd", "3rd", etc.
2. `intcomma`: Adds commas to an integer for readability, such as "1,000".
3. `intword`: Converts an integer to a word-based representation, such as "one thousand" for 1000.
4. `naturalday`: Converts a date to a human-readable format like "today", "tomorrow", or "yesterday".
5. `naturaltime`: Converts a datetime to a human-readable format like "now", "1 minute ago", or "3 days, 2 hours from now".
6. `ordinal`: Converts a number to its corresponding English ordinal word, such as "1st", "2nd", "3rd", etc.
7. `filesizeformat`: Converts a file size to a human-readable format like "13.37 MB" or "1.21 GB".
8. `date`: Formats a date according to a given format string.
9. `time`: Formats a time according to a given format string.

**Tags:**

1. `apnumber`: Same as the `apnumber` filter.
2. `intcomma`: Same as the `intcomma` filter.
3. `intword`: Same as the `intword` filter.
4. `naturalday`: Same as the `naturalday` filter.
5. `naturaltime`: Same as the `naturaltime` filter.
6. `ordinal`: Same as the `ordinal` filter.
7. `filesizeformat`: Same as the `filesizeformat` filter.
8. `date`: Same as the `date` filter.
9. `time`: Same as the `time` filter.

To use any of these tags or filters, you need to include the "humanize" app in your Django project's settings.py file and load it in your template using the `{% load humanize %}` tag. For example, to use the `naturalday` filter to display a date in a human-readable format, you can use:

```
{{ some_date|naturalday }}
```

Or you can use the `naturalday` tag in a block like this:

```
{% load humanize %}
{% naturalday some_date as humanized_date %}
{{ humanized_date }}
```