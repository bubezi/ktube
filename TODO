GOOGLE AND TODO

[x] Chat GPT Prompt
    I am making a django youtube clone and I need the user to add a subscriber with a button. 
    That is, having the Viewer Model added to the channel model's subscribers ManyToManyField
    without having to handle using a new view function.
    The same for like and deslike buttons
[x] google HUMANIze Tags
[x] Add page Loader
[x] *return to last video time after sub from video redirect
[x] Drag and drop functionality
[] Better alternative for paginator
[] How to serve videos better django
[] UPDATE Favivons
[] UPDATE Like and Dislike buttons / svg
[] Better profile image Placeholder
[] Not Found: /robots.txt
[] Django video View count
[] Does Django use websockets
[] Dynamic login redirect
[] Optional url additions /url/<str:pk>
[] Video.Js
[] Learn React
[] UI
    [] Make everything beautiful
    [] responsiveness 
        [] Google Chrome Lighthouse (target 100%)
            [x] How to convert images to WebP and AVIF from PNG or JPEG
            [] Types for video upload
        [] RWA
    [] Possibly with react
[] Google Authentication

#######################################
Pre Hosting shit
    [] Your browser does not support the video tag
    [] python manage.py check ****
        [] python manage.py check --deploy
        [] ****
    [] 

##############################################################
[x] Add DP
[x] Profile Page
[x] fix Change Channel details form
[x] Sub
[x] Organise Templates and views
    [x] Script and css declarations
    [x] include and tags
[x] Like
[x] add upload pages
    [x] Video Upload
    [x] add signup page
    [x] Create playlist page
[x] Fix Navbar
[x] Privacy
    [x] USER should Not be able to change other USER's details outside admin panel
    [x] USER should Not be able to create other USER'S channel
    [x] Private & Unlisted Videos
    [x] Public playlists
[x] History
[x] Liked Videos 
[x] Add playlist(s) page
    [x] Watch Later ** Possibly Created after Viewer is created
    [x] Libary 
        [x] Watch Later
        [x] Saved Playlists
        [x] Liked Videos
        [x] History
    [x] Subscriptions
[] playlist functionality
    [x] Add video to Watchlater functionality
    [x] Add video to playlist functionality
    [x] Remove video from playlist functionality
    [x] Remove video from Watchlater functionality
    [x] Add add and/or remove to
        [x] Playlist page (More of remove)
        [x] Channel page
        [x] Liked videos page and on library page
        [x] Watch page
        [x] Subscriptions page
        [x] Watchlater page and on library page
        [x] History page and on library page
        [x] Library page (More of remove)
    [] Save and Delete playlist functionality
        [x] Playlist page
        [x] Channel page
        [x] Saved Playlists page (remove)
        [] Library page
    [] ABILITY for USERS to delete playlists
    [] playlist views update
    [] PLAY ALL BUTTON FOR Playlists
[] Fix Profile on mobile
[] ABILITY for USERS to delete models
[] Drag and drop functionality
[] Internal Mini player functionality
[] Better alternative for paginator
[] video views and view-count update
[] Blue link problem
[] Get video length
[] Change like and dislike buttons
[] Return to specific page after subscribe login redirect
[] FIX comments
[] COVER PHOTO FOR CHANNELS
[] Utilize the {% empty %} tag in for loop TAGS
[] Personalise password_change_view.html and password_reset_view.html pages
[] ABILITY TO tag individuals in comments
[] video SHORTCUTS
[] ABILITY TO transfer channel to another viewer
[] Custom JavaScript Features
    [] Alert
    [] Confirm
    [] FIND MORE
[] Edit Check Errors Function and make a loop function from a conditional one
[] Compress Js code and all code or some shit
[] Ajax all forms
[] Create logic
    [x] Channel
    [x] comments
    [x] likes and dislikes
    [x] Subscriptions and Playlists
    [] Streaming 
        [] Opencv (and/or) [] NodeJs 
    [] ACC SHOUD ONLY LIKE, dislike & SUB ONCE
    [] Seaking
[] PROBLEMS
    [x] / THE URL problem
    [] GET data from video (USE )
[] To enable video streaming in your Django site, you can follow these general steps:
    [] 1. Store the video files in a directory on your server or in a cloud storage service like AWS S3 or Google Cloud Storage.
    [] 2. Use a media server like Nginx, Apache or HLS to serve the video files to clients. These media servers can handle requests for video files and deliver them to clients over HTTP.
    [] 3. In your Django views, you can generate URLs to the video files based on their filename or ID in your database.
    [] 4. Include a video player in your HTML templates to play the videos. Popular options include Video.js, JW Player, and Plyr.
    [] 5. For live video streaming, you will need to use a streaming protocol like RTMP or HLS, and a media server that supports live streaming.
[] Here are some additional tips and resources for implementing video streaming in Django:
    [] - Use a media server that is optimized for video streaming. Nginx and Apache both have modules for serving video files over HTTP, and HLS is a popular streaming protocol that can be used with both servers.
    [] - Consider using a content delivery network (CDN) to distribute your videos. A CDN can cache your video files at edge locations around the world, reducing latency and improving playback performance for viewers.
    [] - For live video streaming, consider using a service like AWS Elemental MediaLive or Wowza Streaming Engine to handle the video encoding and delivery.
    [] - Make sure to set the appropriate MIME type for video files in your HTTP response headers. For example, for MP4 files, you should set the MIME type to `video/mp4`.
    [] - Use video encoding settings that are optimized for web playback. H.264 is a popular video codec for web video, and the MP4 container format is widely supported by modern browsers.
    [] - Test your video streaming implementation thoroughly across different browsers and devices to ensure smooth playback and optimal performance.
    [] - Here's a good tutorial that covers the basics of implementing video streaming in Django using Nginx and Video.js: https://simpleisbetterthancomplex.com/tutorial/2018/02/03/how-to-stream-video-on-demand-with-django.html



############################################################
