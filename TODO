# KEY
    [] To do
    [x] Done
    [*] Will not do, for now


######
# NOTES

#
Disable whitenoise and ALL related settings before collectstatic command

#
Video-on-demand
Pay-per-view

#
Kenya web experts

######

# GOOGLE AND Research

[] Fieldset

[x] Chat GPT Prompt
    I am making a django youtube clone and I need the user to add a subscriber with a button. 
    That is, having the Viewer Model added to the channel model's subscribers ManyToManyField
    without having to handle using a new view function.
    The same for like and deslike buttons
[x] google HUMANIze Tags
[x] Add page Loader
[x] *return to last video time after sub from video redirect
[x] Drag and drop functionality
[x] Django video View count
[x] Does Django use websockets
[x] UPDATE Like and Dislike buttons / svg
[] How to serve videos better django
[] Better alternative for paginator (For comments and Comment replies)
[] Dynamic login redirect
[] Optional url additions /url/<str:pk>
[] Video.Js

######

# PHASE ! - Initialise
[x] Utilize the {% empty %} tag in for loop TAGS
[x] Add DP
[x] Profile Page
[x] fix Change Channel details form
[x] Sub
[x] Organise Templates and views
    [x] Script and css declarations
    [x] include and tags
[x] Like
[x] add upload pages
    [x] Video Upload
    [x] add signup page
    [x] Create playlist page
[x] Fix Navbar
[x] Privacy
    [x] USER should Not be able to change other USER's details outside admin panel
    [x] USER should Not be able to create other USER'S channel
    [x] Private & Unlisted Videos
    [x] Public playlists
[x] History
[x] Liked Videos 
[x] Fix Correct box element places
[x] Fix Channel page with multiple playlists
[x] video views and view-count update
[x] Add playlist(s) page
    [x] Watch Later ** Possibly Created after Viewer is created
    [x] Libary 
        [x] Watch Later
        [x] Saved Playlists
        [x] Liked Videos
        [x] History
    [x] Subscriptions
[x] playlist functionality
    [x] Add video to Watchlater functionality
    [x] Add video to playlist functionality
    [x] Remove video from playlist functionality
    [x] Remove video from Watchlater functionality
    [x] Add add and/or remove to
        [x] Playlist page (More of remove)
        [x] Channel page
        [x] Liked videos page and on library page
        [x] Watch page
        [x] Subscriptions page
        [x] Watchlater page and on library page
        [x] History page and on library page
        [x] Library page (More of remove)
    [x] ABILITY for USERS to delete playlists
    [x] Save and Delete playlist functionality
        [x] Playlist page
        [x] Channel page
        [x] Saved Playlists page (remove)
        [x] Library page
[x] Ability to Comment
[x] Ability to reply to Comments
[x] PLaylist in Watch Page init
[x] PLaylist in Watch Page
    [x] PLAY ALL BUTTON FOR Playlists
    [x] Playlist views update
[x] ABILITY for USERS to delete models
    [x] Playlist
    [x] Video
    [x] Channel
    [x] Comment
    [x] Comment Reply
    [x] Viewer (USER - unmark active status)
    [x] Password before delete functionality
        [x] Channel
        [x] Viewer (USER - unmark active status)
        [*] Video
            [*] Prompt in browser for input JavaScript
[] ABILITY for USERS to edit models
    [x] Channel
    [] Playlist
        [x] Change name
        [x] Change Public status
        [x] Change Videos
        [] Drag to rearange ****************************************************
    [x] Video
        [x] Change Title
        [*] Change Video
        [x] Change Thumbnail
        [x] Change Description
        [x] Change private
        [x] Change unlisted
    [*] Viewer
    [*] Comment
    [*] Comment Reply
[*] Like and Dislike Comments
[x] PREVENT USER ABILITY TO WATCH VIDEO MULTILPLE TIMES TO INCREASE VIEW COUNT *************
    [x] Currently 5 minutes
[x] Search functionality
[x] Create my Channels page

[x] UPDATE Favivons

######

# PHASE 2 - Perfect
[x] Video slug - From link using video id to slug
[x] Video costs something
[x] Fix revenue percentage error
[x] History compile similar adjacent videos
[x] WARNING:waitress.queue:Task queue depth is 94
[x] WARNING:waitress:total open connections reached the connection limit, no longer accepting new connections
[x] robots.txt => https://ordinarycoders.com/blog/article/robots-text-file-django
[x] Change like and dislike buttons
[x] Get IP address of the view for (esp) logged out viewers
    [x] Viewing algorithm limit
[] Create logic
    [x] Channel
    [x] comments
    [x] likes and dislikes
    [x] Subscriptions and Playlists
    [x] ACC SHOUD ONLY LIKE, dislike & SUB ONCE
    [] Streaming
        [] Opencv (and/or) [] NodeJs 
    [] Get metadata from video 
    [] Seaking
    [] Resume capability
    [] Auto skip (Play next)
    [*] Pictures (For events and shit)
[] Install rtmps in local nginx
[] Lighthouse 100% mobile
    [] PWA
        [x] Installable
        [x] Web app and manifest
        [] register a service worker that controls page and start_url
        [] Maskable Icon
    [] Performance
    [] Accessibility
    [] Best Practises
    [x] SEO
[] Use Docker
    [] Use RTMPs in docker
[] Learn and Use Kubernetes
[] Update types where possible
[] Seperate logic into django apps
[] Learn React
[] Copyright DETECTION AND REGISTERING FUNCTIONALITY
[] Recommend FUNCTIONALITY
[] Analytics
    [] Paid viewers
    [] Views
    [] Likes and Dislikes
    [] Subscribers
[] Limit Video Quality 720p
[] Tutorials
[] Background play 
    [] Premium Videos ()
[] Ads
[] Hover to play
[] Local downloads (Save for offline)
[] Pop out, confirm transaction
[] Trailer, mid video transaction
[] Better profile image Placeholder
[] Categories
[] Video short
[] Shorts ****************************************************************
[] Comment with Emoji ****************************************************************
[] Filter Comment ****************************************************************
[] Optional Disable comments ****************************************************************
[] Respective Currencies in Quotations
[] Report and feedback
[] Internal copyright detection (Sites own videos)
[] Autogenerate thumbnail from video
[] Autoplay
[] Fix forms
    [] Fix edit video form
    [] Fix upload video form. Esp Price
    [] Make form not loose data input after invalid form input During sign up (Or any other form)
    [] Ajax all forms *(or React version of it)
[] Change video thumbnail bug
[] Fix comments bug 
[] Fix Photofiles with Asian characters bug
[] Add Audio stream
[] Find optimum ratio for thumbanail
[] Check Lighthouse errors
[] Search filters
[] An uploading loader (Upoading, processing)
[] Auto Skip
[] Round off cash
[] Log video view count after a percentage of video length
[] Add bootstrap.bundle.js
[] Use tools like ngrok or configure SSL certificates for local testing
[] Check out NODE JS FOR LIVE STREAMING
[] Timezone management
[] Manage recurring Ajax get functions
[] Create dynamic sitemap => https://ordinarycoders.com/blog/article/django-sitemap
[] Decorate Python Code
[] You are signed in another tab, reload to update session ALERT
[] Internal Mini player functionality
[] Add to Que
[] Better alternative for paginator
[] Fix Profile on mobile
[] Drag and drop functionality
[] Blue link problem
[] Get video length
[] Return to specific page after subscribe login redirect
[] Personalise password_change_view.html and password_reset_view.html pages
[] video SHORTCUTS
[] COVER PHOTO FOR CHANNELS
[] Viewer Comment appear just after comment
[] Viewer Reply appear just after reply
[] Viewer Comment be on top of comments
[] Viewer Reply to Comment be on top of replies to comments
[] ABILITY TO tag individuals in comments
[] ABILITY TO transfer channel to another viewer
[] FIX comments
[] UI
    [] Make everything beautiful
        [] Themes
    [] responsiveness 
        [] Google Chrome Lighthouse (target 100%)
            [x] How to convert images to WebP and AVIF from PNG or JPEG
            [] Types for video upload
        [] RWA
[] Migrate Js from HTML to JS files
    [] channel.html
    [] history.html
    [] library.html
    [] liked_videos.html
    [] playlist.html
    [] saved_playlists.html
    [] subscriptions.html
    [] videos.html
    [] watch.html
    [] watchlater.html
[] remove playlistId and other unused arguments from 
    [] handleRemoveFromWatchlater and 
    [] other Functions
        [] channel.html
        [] history.html
        [] library.html
        [] liked_videos.html
        [] playlist.html
        [] subscriptions.html
        [] videos.html
        [] watch.html
        [] watchlater.html
[] Custom JavaScript Features
    [] Alert
    [] Confirm
    [] FIND MORE
[] Edit Check Errors Function and make a loop function from a conditional one
[] Compress Js code and all code or some shit

[] Learn Squel and Bash


######

# Phase 3 - LiveStream

[] To enable video streaming in your Django site, you can follow these general steps:
    [] 1. Store the video files in a directory on your 
    server or in a cloud storage service like AWS S3 or 
    Google Cloud Storage.
    [x] 2. Use a media server like Nginx, Apache or HLS to 
    serve the video files to clients. These media servers 
    can handle requests for video files and deliver them 
    to clients over HTTP.
    [x] 3. In your Django views, you can generate URLs to 
    the video files based on their filename or ID in your 
    database.
    [] 4. Include a video player in your HTML templates to 
    play the videos. Popular options include Video.js, JW 
    Player, and Plyr.
    [] 5. For live video streaming, you will need to use a 
    streaming protocol like RTMP or HLS, and a media server 
    that supports live streaming.
[] Here are some additional tips and resources for implementing 
video streaming in Django:
    [x] - Use a media server that is optimized for video streaming. 
    Nginx and Apache both have modules for serving video files over 
    HTTP, and HLS is a popular streaming protocol that can be used 
    with both servers.
    [] - Consider using a content delivery network (CDN) to distribute 
    your videos. A CDN can cache your video files at edge locations 
    around the world, reducing latency and improving playback performance 
    for viewers.
    [] - For live video streaming, consider using a service like AWS 
    Elemental MediaLive or Wowza Streaming Engine to handle the video 
    encoding and delivery.
    [] - Make sure to set the appropriate MIME type for video files in 
    your HTTP response headers. For example, for MP4 files, you should 
    set the MIME type to `video/mp4`.
    [] - Use video encoding settings that are optimized for web playback. 
    H.264 is a popular video codec for web video, and the MP4 container 
    format is widely supported by modern browsers.
    [] - Test your video streaming implementation thoroughly across different 
    browsers and devices to ensure smooth playback and optimal performance.
    [] - Here's a good tutorial that covers the basics of implementing video 
    streaming in Django using Nginx and Video.js: 
    https://simpleisbetterthancomplex.com/tutorial/2018/02/03/how-to-stream-video-on-demand-with-django.html


######

# Pre Hosting shit
[] Your browser does not support the video tag
[] python manage.py check ****
    [] python manage.py check --deploy
    [] ****
[] python manage.py collectstatic
[] email configuration
[] Authentication 
    [] Google (Firebase)
    [] Facebook
    [] Email

######

# [] PROBLEMS
[x] / THE URL problem
[] GET data from video
